const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Import the Admin model from models directory
const Admin = require('../models/Admin');  // Correct the path if necessary
const Child = require('../models/Child'); // Assuming the Child model is defined similarly

// Middleware to verify JWT and role
const authenticate = (roles) => (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1];
  if (!token) return res.status(401).json({ message: 'No token provided' });

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.status(403).json({ message: 'Invalid token' });
    if (!roles.includes(user.role)) return res.status(403).json({ message: 'Unauthorized' });
    req.user = user;
    next();
  });
};

// Admin Login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  try {
    const admin = await Admin.findOne({ email });
    if (!admin) return res.status(401).json({ message: 'Invalid email' });
    if (!admin.active) return res.status(403).json({ message: 'Account is disabled' });

    const isMatch = await bcrypt.compare(password, admin.password);
    if (!isMatch) return res.status(401).json({ message: 'Invalid password' });

    const token = jwt.sign(
      { id: admin._id, phone: admin.phone, role: 'admin' },
      process.env.JWT_SECRET,
      { expiresIn: '2h' }
    );
    res.json({ message: 'Login successful', token });
  } catch (err) {
    console.error('❌ Admin login error:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// Register Child
router.post('/register-child', authenticate(['admin']), async (req, res) => {
  const { name, email } = req.body;
  try {
    const existing = await Child.findOne({ email });
    if (existing) return res.status(400).json({ message: 'Email already in use' });

    // Generate 6-digit password (same as userId for login)
    const password = Math.floor(100000 + Math.random() * 900000).toString();
    const hashedPassword = await bcrypt.hash(password, 10);
    const child = new Child({
      name,
      email,
      password: hashedPassword,
      registeredBy: req.user.id,
    });
    await child.save();

    // Return userId (generated by pre-save hook) and password
    res.status(201).json({
      message: 'Child registered successfully',
      userId: child.userId,
      password,
    });
  } catch (err) {
    console.error('❌ Register Child Error:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// Get Children Registered by Admin
router.get('/children', authenticate(['admin']), async (req, res) => {
  try {
    const children = await Child.find({ registeredBy: req.user.id }, { password: 0 });
    res.json(children);
  } catch (err) {
    console.error('❌ Error fetching children:', err);
    res.status(500).json({ message: 'Server error fetching children' });
  }
});

// Toggle Child Active Status
router.put('/child/:id/toggle', authenticate(['admin']), async (req, res) => {
  try {
    const child = await Child.findById(req.params.id);
    if (!child) return res.status(404).json({ message: 'Child not found' });
    if (child.registeredBy.toString() !== req.user.id) {
      return res.status(403).json({ message: 'Unauthorized' });
    }
    child.active = !child.active;
    await child.save();
    res.json({ message: `Child ${child.active ? 'enabled' : 'disabled'} successfully` });
  } catch (err) {
    console.error('❌ Error toggling child status:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// Delete Child
router.delete('/child/:id', authenticate(['admin']), async (req, res) => {
  try {
    const child = await Child.findById(req.params.id);
    if (!child) return res.status(404).json({ message: 'Child not found' });
    if (child.registeredBy.toString() !== req.user.id) {
      return res.status(403).json({ message: 'Unauthorized' });
    }
    await Child.findByIdAndDelete(req.params.id);
    res.json({ message: 'Child deleted successfully' });
  } catch (err) {
    console.error('❌ Error deleting child:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// Get Child Reports
router.get('/child/:id/reports', authenticate(['admin']), async (req, res) => {
  try {
    const child = await Child.findById(req.params.id);
    if (!child) return res.status(404).json({ message: 'Child not found' });
    if (child.registeredBy.toString() !== req.user.id) {
      return res.status(403).json({ message: 'Unauthorized' });
    }
    res.json(child.reports);
  } catch (err) {
    console.error('❌ Error fetching reports:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// Update Child Details
router.put('/child/:id', authenticate(['admin']), async (req, res) => {
  const { name, email } = req.body;
  try {
    const child = await Child.findById(req.params.id);
    if (!child) return res.status(404).json({ message: 'Child not found' });
    if (child.registeredBy.toString() !== req.user.id) {
      return res.status(403).json({ message: 'Unauthorized' });
    }
    child.name = name || child.name;
    child.email = email || child.email;
    await child.save();
    res.json({ message: 'Child updated successfully' });
  } catch (err) {
    console.error('❌ Error updating child:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;