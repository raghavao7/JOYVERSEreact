// const express = require('express');
// const router = express.Router();
// const mongoose = require('mongoose');
// const bcrypt = require('bcryptjs');
// const jwt = require('jsonwebtoken');

// // Import the Admin model from models directory
// const Admin = require('../models/Admin');  // Correct the path if necessary
// const Child = require('../models/Child'); // Assuming the Child model is defined similarly

// // Middleware to verify JWT and role
// const authenticate = (roles) => (req, res, next) => {
//   const token = req.headers['authorization']?.split(' ')[1];
//   if (!token) return res.status(401).json({ message: 'No token provided' });

//   jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
//     if (err) return res.status(403).json({ message: 'Invalid token' });
//     if (!roles.includes(user.role)) return res.status(403).json({ message: 'Unauthorized' });
//     req.user = user;
//     next();
//   });
// };

// // Admin Login
// router.post('/login', async (req, res) => {
//   const { email, password } = req.body;
//   try {
//     const admin = await Admin.findOne({ email });
//     if (!admin) return res.status(401).json({ message: 'Invalid email' });
//     if (!admin.active) return res.status(403).json({ message: 'Account is disabled' });

//     const isMatch = await bcrypt.compare(password, admin.password);
//     if (!isMatch) return res.status(401).json({ message: 'Invalid password' });

//     const token = jwt.sign(
//       { id: admin._id, phone: admin.phone, role: 'admin' },
//       process.env.JWT_SECRET,
//       { expiresIn: '2h' }
//     );
//     res.json({ message: 'Login successful', token });
//   } catch (err) {
//     console.error('❌ Admin login error:', err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Register Child
// router.post('/register-child', authenticate(['admin']), async (req, res) => {
//   const { name, email } = req.body;
//   try {
//     const existing = await Child.findOne({ email });
//     if (existing) return res.status(400).json({ message: 'Email already in use' });

//     // Generate 6-digit password (same as userId for login)
//     const password = Math.floor(100000 + Math.random() * 900000).toString();
//     const hashedPassword = await bcrypt.hash(password, 10);
//     const child = new Child({
//       name,
//       email,
//       password: hashedPassword,
//       registeredBy: req.user.id,
//     });
//     await child.save();

//     // Return userId (generated by pre-save hook) and password
//     res.status(201).json({
//       message: 'Child registered successfully',
//       userId: child.userId,
//       password,
//     });
//   } catch (err) {
//     console.error('❌ Register Child Error:', err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Get Children Registered by Admin
// router.get('/children', authenticate(['admin']), async (req, res) => {
//   try {
//     const children = await Child.find({ registeredBy: req.user.id }, { password: 0 });
//     res.json(children);
//   } catch (err) {
//     console.error('❌ Error fetching children:', err);
//     res.status(500).json({ message: 'Server error fetching children' });
//   }
// });

// // Toggle Child Active Status
// router.put('/child/:id/toggle', authenticate(['admin']), async (req, res) => {
//   try {
//     const child = await Child.findById(req.params.id);
//     if (!child) return res.status(404).json({ message: 'Child not found' });
//     if (child.registeredBy.toString() !== req.user.id) {
//       return res.status(403).json({ message: 'Unauthorized' });
//     }
//     child.active = !child.active;
//     await child.save();
//     res.json({ message: `Child ${child.active ? 'enabled' : 'disabled'} successfully` });
//   } catch (err) {
//     console.error('❌ Error toggling child status:', err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Delete Child
// router.delete('/child/:id', authenticate(['admin']), async (req, res) => {
//   try {
//     const child = await Child.findById(req.params.id);
//     if (!child) return res.status(404).json({ message: 'Child not found' });
//     if (child.registeredBy.toString() !== req.user.id) {
//       return res.status(403).json({ message: 'Unauthorized' });
//     }
//     await Child.findByIdAndDelete(req.params.id);
//     res.json({ message: 'Child deleted successfully' });
//   } catch (err) {
//     console.error('❌ Error deleting child:', err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Get Child Reports
// router.get('/child/:id/reports', authenticate(['admin']), async (req, res) => {
//   try {
//     const child = await Child.findById(req.params.id);
//     if (!child) return res.status(404).json({ message: 'Child not found' });
//     if (child.registeredBy.toString() !== req.user.id) {
//       return res.status(403).json({ message: 'Unauthorized' });
//     }
//     res.json(child.reports);
//   } catch (err) {
//     console.error('❌ Error fetching reports:', err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// // Update Child Details
// router.put('/child/:id', authenticate(['admin']), async (req, res) => {
//   const { name, email } = req.body;
//   try {
//     const child = await Child.findById(req.params.id);
//     if (!child) return res.status(404).json({ message: 'Child not found' });
//     if (child.registeredBy.toString() !== req.user.id) {
//       return res.status(403).json({ message: 'Unauthorized' });
//     }
//     child.name = name || child.name;
//     child.email = email || child.email;
//     await child.save();
//     res.json({ message: 'Child updated successfully' });
//   } catch (err) {
//     console.error('❌ Error updating child:', err);
//     res.status(500).json({ message: 'Server error' });
//   }
// });

// module.exports = router;

const express = require('express');
const router = express.Router();
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const crypto = require('crypto');
const Admin = require('../models/Admin');
const Child = require('../models/Child');

// Middleware to Authenticate Admin
const authenticateAdmin = async (req, res, next) => {
  const token = req.header('Authorization')?.replace('Bearer ', '');
  if (!token) return res.status(403).json({ message: 'Access denied' });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const admin = await Admin.findById(decoded.adminId);
    if (!admin || !admin.active) return res.status(401).json({ message: 'Unauthorized' });
    req.admin = admin;
    next();
  } catch (err) {
    res.status(400).json({ message: 'Invalid token' });
  }
};

// Admin Login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  if (!email || !password) return res.status(400).json({ message: 'Email and password required' });

  try {
    const admin = await Admin.findOne({ email });
    if (!admin || !admin.active) return res.status(400).json({ message: 'Invalid email or account disabled' });

    const isMatch = await bcrypt.compare(password, admin.password);
    if (!isMatch) return res.status(400).json({ message: 'Invalid password' });

    const token = jwt.sign(
      { adminId: admin._id, email: admin.email },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );
    res.json({ message: 'Login successful', token, adminId: admin._id });
  } catch (err) {
    console.error('❌ Admin login error:', err);
    res.status(500).json({ message: 'Server error' });
  }
});

// Register Child
router.post('/register-child', authenticateAdmin, async (req, res) => {
  const { childName, phone, userId, password } = req.body;
  if (!childName || !phone || !userId || !password) {
    return res.status(400).json({ message: 'All fields are required' });
  }

  try {
    const existingChild = await Child.findOne({ $or: [{ phone }, { userId }] });
    if (existingChild) {
      return res.status(400).json({ message: 'Child with this phone or user ID already exists' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newChild = new Child({
      childName,
      phone,
      userId,
      password: hashedPassword,
      parentId: req.admin._id,
    });

    await newChild.save();
    req.app.get('io').emit('newChild', { parentId: req.admin._id, child: newChild });
    res.json({ message: 'Child registered successfully', child: newChild });
  } catch (err) {
    console.error('❌ Register child error:', err);
    res.status(500).json({ message: 'Server error registering child' });
  }
});

// Get All Children for Logged-in Admin
router.get('/children', authenticateAdmin, async (req, res) => {
  try {
    const children = await Child.find({ parentId: req.admin._id }).sort({ registeredAt: -1 });
    res.json(children);
  } catch (err) {
    console.error('❌ Error fetching children:', err);
    res.status(500).json({ message: 'Error fetching children' });
  }
});

// Edit Child Information
router.put('/children/:childId/edit', authenticateAdmin, async (req, res) => {
  const { childId } = req.params;
  const { childName, phone, userId } = req.body;

  try {
    const existingChild = await Child.findOne({
      $or: [{ phone }, { userId }],
      _id: { $ne: childId },
    });
    if (existingChild) {
      return res.status(400).json({ message: 'Phone or user ID already in use by another child' });
    }

    const child = await Child.findOneAndUpdate(
      { _id: childId, parentId: req.admin._id },
      { childName, phone, userId },
      { new: true }
    );
    if (!child) return res.status(404).json({ message: 'Child not found or unauthorized' });

    req.app.get('io').emit('childUpdated', { parentId: req.admin._id, child });
    res.json({ message: 'Child updated successfully', child });
  } catch (err) {
    console.error('❌ Error updating child:', err);
    res.status(500).json({ message: 'Error updating child' });
  }
});

// Delete Child
router.delete('/children/:childId/delete', authenticateAdmin, async (req, res) => {
  const { childId } = req.params;

  try {
    const child = await Child.findOneAndDelete({ _id: childId, parentId: req.admin._id });
    if (!child) return res.status(404).json({ message: 'Child not found or unauthorized' });

    req.app.get('io').emit('childDeleted', { parentId: req.admin._id, childId });
    res.json({ message: 'Child deleted successfully' });
  } catch (err) {
    console.error('❌ Error deleting child:', err);
    res.status(500).json({ message: 'Error deleting child' });
  }
});

// Reset Child Password
router.post('/children/:childId/reset-password', authenticateAdmin, async (req, res) => {
  const { childId } = req.params;
  const temporaryPassword = crypto.randomBytes(4).toString('hex'); // Generate 8-char temp password

  try {
    const hashedPassword = await bcrypt.hash(temporaryPassword, 10);
    const child = await Child.findOneAndUpdate(
      { _id: childId, parentId: req.admin._id },
      { password: hashedPassword },
      { new: true }
    );
    if (!child) return res.status(404).json({ message: 'Child not found or unauthorized' });

    res.json({ message: 'Password reset successfully', temporaryPassword });
  } catch (err) {
    console.error('❌ Error resetting child password:', err);
    res.status(500).json({ message: 'Error resetting password' });
  }
});

// Activate/Deactivate Child
router.patch('/children/:childId/status', authenticateAdmin, async (req, res) => {
  const { childId } = req.params;
  const { isActive } = req.body;

  try {
    const child = await Child.findOneAndUpdate(
      { _id: childId, parentId: req.admin._id },
      { isActive },
      { new: true }
    );
    if (!child) return res.status(404).json({ message: 'Child not found or unauthorized' });

    req.app.get('io').emit('childStatusUpdated', { parentId: req.admin._id, child });
    res.json({ message: `Child status updated to ${isActive ? 'Active' : 'Inactive'}`, child });
  } catch (err) {
    console.error('❌ Error updating child status:', err);
    res.status(500).json({ message: 'Error updating child status' });
  }
});

module.exports = router;